import { ethers, Transaction } from "ethers";
import BigNumber from 'bignumber.js';
import { DictInterface, IRouteStep, IReward } from './interfaces';
export declare class Pool {
    id: string;
    name: string;
    fullName: string;
    symbol: string;
    referenceAsset: string;
    swap: string;
    zap: string | null;
    lpToken: string;
    gauge: string;
    rewardContract: string | null;
    underlyingCoins: string[];
    coins: string[];
    underlyingCoinAddresses: string[];
    coinAddresses: string[];
    underlyingDecimals: number[];
    decimals: number[];
    useLending: boolean[];
    isMeta: boolean;
    isFake: boolean;
    isCrypto: boolean;
    basePool: string;
    isFactory: boolean;
    isMetaFactory: boolean;
    isPlainFactory: boolean;
    isCryptoFactory: boolean;
    rewardTokens: string[];
    estimateGas: {
        addLiquidityApprove: (amounts: string[]) => Promise<number>;
        addLiquidity: (amounts: string[]) => Promise<number>;
        depositAndStakeApprove: (amounts: string[]) => Promise<number>;
        depositAndStake: (amounts: string[]) => Promise<number>;
        addLiquidityWrappedApprove: (amounts: string[]) => Promise<number>;
        addLiquidityWrapped: (amounts: string[]) => Promise<number>;
        depositAndStakeWrappedApprove: (amounts: string[]) => Promise<number>;
        depositAndStakeWrapped: (amounts: string[]) => Promise<number>;
        gaugeDepositApprove: (lpTokenAmount: string) => Promise<number>;
        gaugeDeposit: (lpTokenAmount: string) => Promise<number>;
        gaugeWithdraw: (lpTokenAmount: string) => Promise<number>;
        removeLiquidityApprove: (lpTokenAmount: string) => Promise<number>;
        removeLiquidity: (lpTokenAmount: string) => Promise<number>;
        removeLiquidityWrapped: (lpTokenAmount: string) => Promise<number>;
        removeLiquidityImbalanceApprove: (amounts: string[]) => Promise<number>;
        removeLiquidityImbalance: (amounts: string[]) => Promise<number>;
        removeLiquidityImbalanceWrapped: (amounts: string[]) => Promise<number>;
        removeLiquidityOneCoinApprove: (lpTokenAmount: string, coin: string | number) => Promise<number>;
        removeLiquidityOneCoin: (lpTokenAmount: string, coin: string | number) => Promise<number>;
        removeLiquidityOneCoinWrapped: (lpTokenAmount: string, coin: string | number) => Promise<number>;
        exchangeApprove: (inputCoin: string | number, amount: string) => Promise<number>;
        exchange: (inputCoin: string | number, outputCoin: string | number, amount: string, maxSlippage: number) => Promise<number>;
        exchangeWrappedApprove: (inputCoin: string | number, amount: string) => Promise<number>;
        exchangeWrapped: (inputCoin: string | number, outputCoin: string | number, amount: string, maxSlippage: number) => Promise<number>;
    };
    stats: {
        getParameters: () => Promise<{
            virtualPrice: string;
            fee: string;
            adminFee: string;
            A: string;
            gamma?: string;
        }>;
        getPoolBalances: () => Promise<string[]>;
        getPoolWrappedBalances: () => Promise<string[]>;
        getTotalLiquidity: (useApi?: boolean) => Promise<string>;
        getVolume: () => Promise<string>;
        getBaseApy: () => Promise<{
            day: string;
            week: string;
            month: string;
            total: string;
        }>;
        getTokenApy: () => Promise<[baseApy: string, boostedApy: string]>;
        getRewardsApy: () => Promise<IReward[]>;
    };
    constructor(id: string);
    calcLpTokenAmount: (amounts: string[], isDeposit?: boolean) => Promise<string>;
    calcLpTokenAmountWrapped: (amounts: string[], isDeposit?: boolean) => Promise<string>;
    private getParameters;
    private getPoolBalances;
    private getPoolWrappedBalances;
    private getTotalLiquidity;
    private _getPoolStats;
    private getVolume;
    private getBaseApy;
    private getTokenApy;
    private getRewardsApy;
    addLiquidityExpected: (amounts: string[]) => Promise<string>;
    addLiquiditySlippage: (amounts: string[]) => Promise<string>;
    addLiquidityIsApproved: (amounts: string[]) => Promise<boolean>;
    private addLiquidityApproveEstimateGas;
    addLiquidityApprove: (amounts: string[]) => Promise<string[]>;
    private addLiquidityEstimateGas;
    balancedAmounts: () => Promise<string[]>;
    addLiquidity: (amounts: string[]) => Promise<string>;
    depositAndStakeExpected: (amounts: string[]) => Promise<string>;
    depositAndStakeSlippage: (amounts: string[]) => Promise<string>;
    depositAndStakeIsApproved: (amounts: string[]) => Promise<boolean>;
    private depositAndStakeApproveEstimateGas;
    depositAndStakeApprove: (amounts: string[]) => Promise<string[]>;
    private depositAndStakeEstimateGas;
    depositAndStake: (amounts: string[]) => Promise<string>;
    private _depositAndStake;
    balancedWrappedAmounts: () => Promise<string[]>;
    addLiquidityWrappedExpected: (amounts: string[]) => Promise<string>;
    addLiquidityWrappedSlippage: (amounts: string[]) => Promise<string>;
    addLiquidityWrappedIsApproved: (amounts: string[]) => Promise<boolean>;
    private addLiquidityWrappedApproveEstimateGas;
    addLiquidityWrappedApprove: (amounts: string[]) => Promise<string[]>;
    private addLiquidityWrappedEstimateGas;
    addLiquidityWrapped: (amounts: string[]) => Promise<string>;
    depositAndStakeWrappedExpected: (amounts: string[]) => Promise<string>;
    depositAndStakeWrappedSlippage: (amounts: string[]) => Promise<string>;
    depositAndStakeWrappedIsApproved: (amounts: string[]) => Promise<boolean>;
    private depositAndStakeWrappedApproveEstimateGas;
    depositAndStakeWrappedApprove: (amounts: string[]) => Promise<string[]>;
    private depositAndStakeWrappedEstimateGas;
    depositAndStakeWrapped: (amounts: string[]) => Promise<string>;
    removeLiquidityExpected: (lpTokenAmount: string) => Promise<string[]>;
    removeLiquidityIsApproved: (lpTokenAmount: string) => Promise<boolean>;
    private removeLiquidityApproveEstimateGas;
    removeLiquidityApprove: (lpTokenAmount: string) => Promise<string[]>;
    private removeLiquidityEstimateGas;
    removeLiquidity: (lpTokenAmount: string) => Promise<string>;
    removeLiquidityWrappedExpected: (lpTokenAmount: string) => Promise<string[]>;
    private removeLiquidityWrappedEstimateGas;
    removeLiquidityWrapped: (lpTokenAmount: string) => Promise<string>;
    removeLiquidityImbalanceExpected: (amounts: string[]) => Promise<string>;
    removeLiquidityImbalanceSlippage: (amounts: string[]) => Promise<string>;
    removeLiquidityImbalanceIsApproved: (amounts: string[]) => Promise<boolean>;
    private removeLiquidityImbalanceApproveEstimateGas;
    removeLiquidityImbalanceApprove: (amounts: string[]) => Promise<string[]>;
    private removeLiquidityImbalanceEstimateGas;
    removeLiquidityImbalance: (amounts: string[]) => Promise<string>;
    removeLiquidityImbalanceWrappedExpected: (amounts: string[]) => Promise<string>;
    removeLiquidityImbalanceWrappedSlippage: (amounts: string[]) => Promise<string>;
    private removeLiquidityImbalanceWrappedEstimateGas;
    removeLiquidityImbalanceWrapped: (amounts: string[], estimateGas?: boolean) => Promise<string | number>;
    removeLiquidityOneCoinExpected: (lpTokenAmount: string, coin: string | number) => Promise<string>;
    removeLiquidityOneCoinSlippage: (lpTokenAmount: string, coin: string | number) => Promise<string>;
    removeLiquidityOneCoinIsApproved: (lpTokenAmount: string) => Promise<boolean>;
    private removeLiquidityOneCoinApproveEstimateGas;
    removeLiquidityOneCoinApprove: (lpTokenAmount: string) => Promise<string[]>;
    private removeLiquidityOneCoinEstimateGas;
    removeLiquidityOneCoin: (lpTokenAmount: string, coin: string | number) => Promise<string>;
    removeLiquidityOneCoinWrappedExpected: (lpTokenAmount: string, coin: string | number) => Promise<string>;
    removeLiquidityOneCoinWrappedSlippage: (lpTokenAmount: string, coin: string | number) => Promise<string>;
    private removeLiquidityOneCoinWrappedEstimateGas;
    removeLiquidityOneCoinWrapped: (lpTokenAmount: string, coin: string | number) => Promise<string>;
    gaugeDepositIsApproved: (lpTokenAmount: string) => Promise<boolean>;
    private gaugeDepositApproveEstimateGas;
    gaugeDepositApprove: (lpTokenAmount: string) => Promise<string[]>;
    private gaugeDepositEstimateGas;
    gaugeDeposit: (lpTokenAmount: string) => Promise<string>;
    private gaugeWithdrawEstimateGas;
    gaugeWithdraw: (lpTokenAmount: string) => Promise<string>;
    gaugeClaimableTokens: (address?: string) => Promise<string>;
    gaugeClaimTokens: () => Promise<string>;
    gaugeClaimableRewards: (address?: string) => Promise<{
        token: string;
        symbol: string;
        amount: string;
    }[]>;
    gaugeClaimRewards: () => Promise<string>;
    balances: (...addresses: string[] | string[][]) => Promise<DictInterface<DictInterface<string>> | DictInterface<string>>;
    lpTokenBalances: (...addresses: string[] | string[][]) => Promise<DictInterface<DictInterface<string>> | DictInterface<string>>;
    underlyingCoinBalances: (...addresses: string[] | string[][]) => Promise<DictInterface<DictInterface<string>> | DictInterface<string>>;
    coinBalances: (...addresses: string[] | string[][]) => Promise<DictInterface<DictInterface<string>> | DictInterface<string>>;
    allCoinBalances: (...addresses: string[] | string[][]) => Promise<DictInterface<DictInterface<string>> | DictInterface<string>>;
    exchangeExpected: (inputCoin: string | number, outputCoin: string | number, amount: string) => Promise<string>;
    exchangeIsApproved: (inputCoin: string | number, amount: string) => Promise<boolean>;
    private exchangeApproveEstimateGas;
    exchangeApprove: (inputCoin: string | number, amount: string) => Promise<string[]>;
    private exchangeEstimateGas;
    exchange: (inputCoin: string | number, outputCoin: string | number, amount: string, maxSlippage?: number) => Promise<string>;
    exchangeWrappedExpected: (inputCoin: string | number, outputCoin: string | number, amount: string) => Promise<string>;
    exchangeWrappedIsApproved: (inputCoin: string | number, amount: string) => Promise<boolean>;
    private exchangeWrappedApproveEstimateGas;
    exchangeWrappedApprove: (inputCoin: string | number, amount: string) => Promise<string[]>;
    private exchangeWrappedEstimateGas;
    exchangeWrapped: (inputCoin: string | number, outputCoin: string | number, amount: string, maxSlippage?: number) => Promise<string>;
    gaugeMaxBoostedDeposit: (...addresses: string[]) => Promise<DictInterface<string>>;
    gaugeOptimalDeposits: (...accounts: string[]) => Promise<DictInterface<string>>;
    boost: (address: string) => Promise<string>;
    private _getCoinIdx;
    private _getRates;
    private _balances;
    private _underlyingPrices;
    private _wrappedPrices;
    private _addLiquidityCryptoSlippage;
    private _addLiquiditySlippage;
    private _removeLiquidityCryptoSlippage;
    private _removeLiquiditySlippage;
    private _balancedAmounts;
    private _calcLpTokenAmount;
    private _calcLpTokenAmountZap;
    private _calcLpTokenAmountWithUnderlying;
    private _addLiquiditySwap;
    private _addLiquidityZap;
    private _addLiquidityMetaZap;
    private _addLiquidity;
    private _calcExpectedAmounts;
    private _calcMinAmounts;
    private _calcExpectedUnderlyingAmounts;
    private _calcMinUnderlyingAmounts;
    private _calcExpectedUnderlyingAmountsMeta;
    private _calcMinUnderlyingAmountsMeta;
    private _removeLiquiditySwap;
    private _removeLiquidityZap;
    private _removeLiquidityMetaZap;
    private _removeLiquidity;
    private _removeLiquidityImbalanceSwap;
    private _removeLiquidityImbalanceZap;
    private _removeLiquidityImbalanceMetaZap;
    private _removeLiquidityImbalance;
    private _calcWithdrawOneCoinSwap;
    private _calcWithdrawOneCoinZap;
    private _calcWithdrawOneCoin;
    private _removeLiquidityOneCoinSwap;
    private _removeLiquidityOneCoinZap;
    private _removeLiquidityOneCoin;
    private _getExchangeOutput;
    private _getExchangeOutputWrapped;
}
export declare const getBestPoolAndOutput: (inputCoin: string, outputCoin: string, amount: string) => Promise<{
    poolName: string;
    poolAddress: string;
    output: string;
}>;
export declare const exchangeExpected: (inputCoin: string, outputCoin: string, amount: string) => Promise<string>;
export declare const exchangeIsApproved: (inputCoin: string, outputCoin: string, amount: string) => Promise<boolean>;
export declare const exchangeApproveEstimateGas: (inputCoin: string, outputCoin: string, amount: string) => Promise<number>;
export declare const exchangeApprove: (inputCoin: string, outputCoin: string, amount: string) => Promise<string[]>;
export declare const exchangeEstimateGas: (inputCoin: string, outputCoin: string, amount: string, maxSlippage?: number) => Promise<number>;
export declare const exchange: (inputCoin: string, outputCoin: string, amount: string, maxSlippage?: number) => Promise<string>;
export declare const crossAssetExchangeAvailable: (inputCoin: string, outputCoin: string) => Promise<boolean>;
export declare const _getSmallAmountForCoin: (coinAddress: string) => string;
export declare const _crossAssetExchangeInfo: (inputCoinAddress: string, outputCoinAddress: string, inputCoinDecimals: number, outputCoinDecimals: number, amount: string) => Promise<{
    route: string[];
    indices: ethers.BigNumber[];
    _expected: ethers.BigNumber;
    slippage: number;
}>;
export declare const crossAssetExchangeOutputAndSlippage: (inputCoin: string, outputCoin: string, amount: string) => Promise<{
    slippage: number;
    output: string;
}>;
export declare const crossAssetExchangeExpected: (inputCoin: string, outputCoin: string, amount: string) => Promise<string>;
export declare const crossAssetExchangeIsApproved: (inputCoin: string, amount: string) => Promise<boolean>;
export declare const crossAssetExchangeApproveEstimateGas: (inputCoin: string, amount: string) => Promise<number>;
export declare const crossAssetExchangeApprove: (inputCoin: string, amount: string) => Promise<string[]>;
export declare const crossAssetExchangeEstimateGas: (inputCoin: string, outputCoin: string, amount: string, maxSlippage?: number) => Promise<number>;
export declare const crossAssetExchange: (inputCoin: string, outputCoin: string, amount: string, maxSlippage?: number) => Promise<string>;
export declare const getUserPoolList: (address?: string | undefined) => Promise<string[]>;
export declare const _findAllRoutes: (inputCoinAddress: string, outputCoinAddress: string) => Promise<IRouteStep[][]>;
export declare const getBestRouteAndOutput: (inputCoin: string, outputCoin: string, amount: string) => Promise<{
    route: IRouteStep[];
    output: string;
}>;
export declare const routerExchangeExpected: (inputCoin: string, outputCoin: string, amount: string) => Promise<string>;
export declare const routerExchangeIsApproved: (inputCoin: string, amount: string) => Promise<boolean>;
export declare const routerExchangeApproveEstimateGas: (inputCoin: string, amount: string) => Promise<number>;
export declare const routerExchangeApprove: (inputCoin: string, amount: string) => Promise<string[]>;
export declare const routerExchangeEstimateGas: (inputCoin: string, outputCoin: string, amount: string) => Promise<number>;
export declare const routerExchange: (inputCoin: string, outputCoin: string, amount: string, nonce: number, gasLimit: number, maxSlippage?: number) => Promise<Transaction>;
